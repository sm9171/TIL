(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{363:function(t,e,r){t.exports=r.p+"assets/img/process.6a759d3d.png"},381:function(t,e,r){"use strict";r.r(e);var i=r(44),a=Object(i.a)({},(function(){var t=this,e=t.$createElement,i=t._self._c||e;return i("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[i("h1",{attrs:{id:"_2022년-10월"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#_2022년-10월"}},[t._v("#")]),t._v(" 2022년 10월")]),t._v(" "),i("h2",{attrs:{id:"_10월-8일-cqrs-패턴-변경-감지-방법"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#_10월-8일-cqrs-패턴-변경-감지-방법"}},[t._v("#")]),t._v(" 10월 8일 - CQRS 패턴 ,변경 감지 방법")]),t._v(" "),i("h3",{attrs:{id:"command-and-query-responsibility-segregation"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#command-and-query-responsibility-segregation"}},[t._v("#")]),t._v(" Command and Query Responsibility Segregation")]),t._v(" "),i("ul",[i("li",[t._v("명령과 조회의 책임을 분리한다.")])]),t._v(" "),i("h3",{attrs:{id:"cqrs가-필요한-시점"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#cqrs가-필요한-시점"}},[t._v("#")]),t._v(" CQRS가 필요한 시점")]),t._v(" "),i("ul",[i("li",[t._v("UX와 비지니스 요구 사항이 복잡해질 때")]),t._v(" "),i("li",[t._v("조회 성능을 보다 높이고 싶을 때")]),t._v(" "),i("li",[t._v("데이터를 관리하는 영역과 이를 뷰로 전달하는 영역의 책임이 나뉘어져야 할 때")]),t._v(" "),i("li",[t._v("시스템 확장성을 높이고 싶을 때")])]),t._v(" "),i("h3",{attrs:{id:"변경-감지-방법-내려갈수록-추상화레벨이-낮아짐"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#변경-감지-방법-내려갈수록-추상화레벨이-낮아짐"}},[t._v("#")]),t._v(" 변경 감지 방법 (내려갈수록 추상화레벨이 낮아짐.)")]),t._v(" "),i("ol",[i("li",[t._v("JPA EntityListensers\n"),i("ol",[i("li",[t._v("@Entity 혹은 @MappedSuperclass 객체 메소드에 어노테이션 지정으로 사용 가능")]),t._v(" "),i("li",[t._v("7개의 Callback 지정 함수 선언 가능 - Entity 생명주기에서 어느시점에서든 Callback 받을수 있음")]),t._v(" "),i("li",[t._v("해당 엔티티만 인자로 반환되기 때문에 구체적인 추적 불가")])])]),t._v(" "),i("li",[t._v("Hibernate EventListener\n"),i("ol",[i("li",[t._v("SessionFacoryImpl -> SessionFactoryServiceRegistry -> EventListenerRegistry")]),t._v(" "),i("li",[t._v("26가지 디테일한 상황에 콜백")]),t._v(" "),i("li",[t._v("받고자 하는 상황에 따른 인터페이스를 구현한 클래스 등록")]),t._v(" "),i("li",[t._v("보다 상세한 정보 전달 (변경된 프로퍼티, 이전 상태, 현재 상태 등)")]),t._v(" "),i("li",[t._v("모든 엔티티 변경 사항이 전달 됨")])])]),t._v(" "),i("li",[t._v("Hibernate Interceptor\n"),i("ol",[i("li",[t._v("Session 혹은 SessionFactory에 Interceptor 등록 가능")]),t._v(" "),i("li",[t._v("EventListener에 비해 적은 콜백 종류")]),t._v(" "),i("li",[t._v("저장될 데이터 조작 가능")])])]),t._v(" "),i("li",[t._v("Spring AOP\n"),i("ol",[i("li",[t._v("Method에만 설정 가능")]),t._v(" "),i("li",[t._v("Method 실행 전/후, 반환 후, 예외 상황, 어노테이션 붙은 경우 등")]),t._v(" "),i("li",[t._v("Pointcut 문법으로 동작")]),t._v(" "),i("li",[t._v("특정 케이스에만 적용 하자")])])])]),t._v(" "),i("h2",{attrs:{id:"_10월-9일-connecttimeout과-sockettimeout"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#_10월-9일-connecttimeout과-sockettimeout"}},[t._v("#")]),t._v(" 10월 9일 - connectTimeout과 socketTimeout")]),t._v(" "),i("ul",[i("li",[t._v("Socket Connect 시 타임아웃(connectTimeout): Socket.connect(SocketAddress endpoint, int timeout) 메서드를 위한 제한 시간")]),t._v(" "),i("li",[t._v("Socket Read/Write의 타임아웃(socketTimeout): Socket.setSoTimeout(int timeout) 메서드를 위한 제한 시간")])]),t._v(" "),i("h2",{attrs:{id:"_10월-14일-ioc-di-dip-개념-잡기"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#_10월-14일-ioc-di-dip-개념-잡기"}},[t._v("#")]),t._v(" 10월 14일 - IoC, DI, DIP 개념 잡기")]),t._v(" "),i("h3",{attrs:{id:"inversion-of-control-ioc-제어의-역전"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#inversion-of-control-ioc-제어의-역전"}},[t._v("#")]),t._v(" Inversion of Control (IoC, 제어의 역전)")]),t._v(" "),i("p",[t._v("코드의 흐름을 제어하는 주체가 바뀌는 것.")]),t._v(" "),i("h3",{attrs:{id:"dependency-inversion-principle-dip-의존관계-역전-법칙"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#dependency-inversion-principle-dip-의존관계-역전-법칙"}},[t._v("#")]),t._v(" Dependency Inversion principle (DIP, 의존관계 역전 법칙)")]),t._v(" "),i("p",[t._v("구체 클래스가 아닌 추상화를 의존하게 하여 변경에 유연하게 하자.")]),t._v(" "),i("h3",{attrs:{id:"dependency-injection-di-의존성-주입"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#dependency-injection-di-의존성-주입"}},[t._v("#")]),t._v(" Dependency Injection (DI, 의존성 주입)")]),t._v(" "),i("p",[t._v("필요로 하는 오브젝트를 스스로 생성하는 것이 아닌 외부로 부터 주입받는 기법(생성주입, 세터주입, 필드 주입)")]),t._v(" "),i("h2",{attrs:{id:"_10월-22일-spring-batch-tasklet방식과-chunk방식의-차이점"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#_10월-22일-spring-batch-tasklet방식과-chunk방식의-차이점"}},[t._v("#")]),t._v(" 10월 22일 - Spring batch Tasklet방식과 Chunk방식의 차이점")]),t._v(" "),i("ul",[i("li",[t._v("step에서 tasklet 방식으로 구성하는 방법과 ItemReader/ItemProcessor/ItemWriter 단위로 청크 지향 프로세싱을 구성하는 방법이 있다.")])]),t._v(" "),i("h3",{attrs:{id:"tasklet-방식"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#tasklet-방식"}},[t._v("#")]),t._v(" Tasklet 방식")]),t._v(" "),i("ul",[i("li",[t._v("단계 내에서 단일 태스크를 수행하기 위한 것으로 임의의 Step을 실행할 때 읽기/처리/쓰기를 하나의 작업으로 처리하는 방식")]),t._v(" "),i("li",[t._v("배치 처리 과정이 비교적 쉬운 경우 쉽게 사용")]),t._v(" "),i("li",[t._v("대량 처리를 하는 경우 더 복잡")]),t._v(" "),i("li",[t._v("하나의 큰 덩어리를 여러 덩어리로 나누어 처리하기 부적합")])]),t._v(" "),i("h3",{attrs:{id:"chunk-방식"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#chunk-방식"}},[t._v("#")]),t._v(" Chunk 방식")]),t._v(" "),i("ul",[i("li",[t._v("트랜잭션 경계 내에서 청크 단위(아이템이 트랜잭션에서 커밋되는 수)로 데이터를 읽고 생성하는 기법")]),t._v(" "),i("li",[t._v("ItemReader, ItemProcessor, ItemWriter의 관계 이해 필요")]),t._v(" "),i("li",[t._v("대량 처리를 하는 경우 Tasklet 보다 비교적 쉽게 구현")]),t._v(" "),i("li",[t._v("예를 들면 10,000개의 데이터 중 1,000개씩 10개의 덩어리로 수행")])]),t._v(" "),i("h2",{attrs:{id:"_10월-23일-스프링프레임워크와-스프링부트의-차이점"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#_10월-23일-스프링프레임워크와-스프링부트의-차이점"}},[t._v("#")]),t._v(" 10월 23일 - 스프링프레임워크와 스프링부트의 차이점")]),t._v(" "),i("h3",{attrs:{id:"spring-boot-starter"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#spring-boot-starter"}},[t._v("#")]),t._v(" Spring Boot Starter")]),t._v(" "),i("ul",[i("li",[t._v("기존에는 스프링을 사용할 때 버전까지 명시하고 버전에 맞는 설정을 하였지만, 스프링 부트는 버전 관리를 스프링 부트에 의해서 관리됩니다. 따라서 아래처럼 spring-boot-starter-web을 사용하면 종속된 모든 라이브러리를 알맞게 찾아서 함께 가져오기 때문에 종속성이나 호환 버전에 대해 신경 쓸 필요가 없게 됨.")])]),t._v(" "),i("h3",{attrs:{id:"embed-tomcat"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#embed-tomcat"}},[t._v("#")]),t._v(" Embed Tomcat")]),t._v(" "),i("ul",[i("li",[t._v("스프링 부트는 내장형 톰캣을 가지고 있기 때문에 별도의 톰캣을 설정할 필요가 없어졌으며, 그렇기 때문에 독립적으로 실행 가능한 jar로 손쉽게 배포가 가능")])]),t._v(" "),i("h3",{attrs:{id:"autoconfigurator"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#autoconfigurator"}},[t._v("#")]),t._v(" AutoConfigurator")]),t._v(" "),i("ul",[i("li",[t._v("공통적으로 필요한 DispatcherServlet같은 설정을 어노테이션을 이용하여 대신할 수 있도록 해준다.")]),t._v(" "),i("li",[t._v("스프링 부트의 main 메서드는 @SpringBootApplication 어노테이션을 가지고 있는데 이것은 ComponentScan + configuraion + EnableAutoConfiguration를 합친 어노테이션 이라볼 수 있다.")])]),t._v(" "),i("h2",{attrs:{id:"_10월-31일-filter-interceptor-aop의-차이점"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#_10월-31일-filter-interceptor-aop의-차이점"}},[t._v("#")]),t._v(" 10월 31일 - filter, interceptor, AOP의 차이점")]),t._v(" "),i("p",[t._v("자바 웹 개발을 하다보면 공통 관심사를 분리해야될 시점이 생기는데 이때 보통 filter,interceptor,AOP를 사용한다. 이 세가지의 차이점을 알아보자.")]),t._v(" "),i("h3",{attrs:{id:"filter-interceptor-aop의-흐름"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#filter-interceptor-aop의-흐름"}},[t._v("#")]),t._v(" Filter, Interceptor, AOP의 흐름")]),t._v(" "),i("p",[t._v("Filter → Interceptor → AOP → Interceptor → Filter")]),t._v(" "),i("ol",[i("li",[t._v("서버를 실행시켜 서블릿이 올라오는 동안에 init이 실행되고, 그 후 doFilter가 실행된다.")]),t._v(" "),i("li",[t._v("컨트롤러에 들어가기 전 preHandler가 실행된다")]),t._v(" "),i("li",[t._v("컨트롤러에서 나와 postHandler, after Completion, doFilter 순으로 진행이 된다.")]),t._v(" "),i("li",[t._v("서블릿 종료 시 destroy가 실행된다.")])]),t._v(" "),i("p",[i("img",{attrs:{src:r(363),alt:"process.png"}})]),t._v(" "),i("h3",{attrs:{id:"필터-filter-란"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#필터-filter-란"}},[t._v("#")]),t._v(" 필터(Filter)란?")]),t._v(" "),i("ul",[i("li",[t._v("말그대로 요청과 응답을 거른뒤 정제하는 역할을 한다.")]),t._v(" "),i("li",[t._v("서블릿 필터는 DispatcherServlet 이전에 실행이 되는데 필터가 동작하도록 지정된 자원의 앞단에서 요청내용을 변경하거나, 여러가지 체크를 수행할 수 있다.")]),t._v(" "),i("li",[t._v("또한 자원의 처리가 끝난 후 응답내용에 대해서도 변경하는 처리를 할 수가 있다.")]),t._v(" "),i("li",[t._v("보통 web.xml에 등록하고, 일반적으로 인코딩 변환 처리, XSS방어 등의 요청에 대한 처리로 사용된다.")]),t._v(" "),i("li",[t._v("springsecurity에서 filter를 이용하여 인증 인가 부분을 쉽게 구축한다.")])]),t._v(" "),i("h3",{attrs:{id:"필터-filter-의-용도-및-예시"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#필터-filter-의-용도-및-예시"}},[t._v("#")]),t._v(" 필터(Filter)의 용도 및 예시")]),t._v(" "),i("ul",[i("li",[t._v("공통된 보안 및 인증/인가 관련 작업")]),t._v(" "),i("li",[t._v("모든 요청에 대한 로깅 또는 감사")]),t._v(" "),i("li",[t._v("이미지/데이터 압축 및 문자열 인코딩")]),t._v(" "),i("li",[t._v("Spring과 분리되어야 하는 기능")])]),t._v(" "),i("h3",{attrs:{id:"interceptor"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#interceptor"}},[t._v("#")]),t._v(" Interceptor")]),t._v(" "),i("ul",[i("li",[t._v("요청에 대한 작업 전/후로 가로챈다고 보면 된다.")]),t._v(" "),i("li",[t._v("필터는 스프링 컨텍스트 외부에 존재하여 스프링과 무관한 자원에 대해 동작한다.")]),t._v(" "),i("li",[t._v("하지만 인터셉터는 스프링의 DistpatcherServlet이 컨트롤러를 호출하기 전, 후로 끼어들기 때문에 스프링 컨텍스트(Context, 영역) 내부에서 Controller(Handler)에 관한 요청과 응답에 대해 처리한다.")]),t._v(" "),i("li",[t._v("스프링의 모든 빈 객체에 접근할 수 있다.")]),t._v(" "),i("li",[t._v("인터셉터는 여러 개를 사용할 수 있고 로그인 체크, 권한체크, 프로그램 실행시간 계산작업 로그확인 등의 업무처리")])]),t._v(" "),i("h3",{attrs:{id:"인터셉터-interceptor-의-용도-및-예시"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#인터셉터-interceptor-의-용도-및-예시"}},[t._v("#")]),t._v(" 인터셉터(Interceptor)의 용도 및 예시")]),t._v(" "),i("ul",[i("li",[t._v("세부적인 보안 및 인증/인가 공통 작업")]),t._v(" "),i("li",[t._v("API 호출에 대한 로깅 또는 감사")]),t._v(" "),i("li",[t._v("Controller로 넘겨주는 정보(데이터)의 가공")])]),t._v(" "),i("h3",{attrs:{id:"aop"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#aop"}},[t._v("#")]),t._v(" AOP")]),t._v(" "),i("ul",[i("li",[t._v("OOP를 보완하기 위해 나온 개념")]),t._v(" "),i("li",[t._v("객체 지향의 프로그래밍을 했을 때 중복을 줄일 수 없는 부분을 줄이기 위해 종단면(관점)에서 바라보고 처리한다.")]),t._v(" "),i("li",[t._v("주로 '로깅', '트랜잭션', '에러 처리'등 비즈니스단의 메서드에서 조금 더 세밀하게 조정하고 싶을 때 사용합니다.")]),t._v(" "),i("li",[t._v("Interceptor나 Filter와는 달리 메소드 전후의 지점에 자유롭게 설정이 가능하다.")]),t._v(" "),i("li",[t._v("Interceptor와 Filter는 주소로 대상을 구분해서 걸러내야하는 반면, AOP는 주소, 파라미터, 애노테이션 등 다양한 방법으로 대상을 지정할 수 있다.")]),t._v(" "),i("li",[t._v("AOP의 Advice와 HandlerInterceptor의 가장 큰 차이는 파라미터의 차이다.")]),t._v(" "),i("li",[t._v("Advice의 경우 JoinPoint나 ProceedingJoinPoint 등을 활용해서 호출한다.")]),t._v(" "),i("li",[t._v("반면 HandlerInterceptor는 Filter와 유사하게 HttpServletRequest, HttpServletResponse를 파라미터로 사용한다.")])])])}),[],!1,null,null,null);e.default=a.exports}}]);